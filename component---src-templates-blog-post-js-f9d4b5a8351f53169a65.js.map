{"version":3,"file":"component---src-templates-blog-post-js-f9d4b5a8351f53169a65.js","mappings":"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","sources":["webpack://Adiela Abishua - Portfolio Website/./src/components/BlogLayout.js","webpack://Adiela Abishua - Portfolio Website/./src/components/bio.js","webpack://Adiela Abishua - Portfolio Website/./src/components/seo.js","webpack://Adiela Abishua - Portfolio Website/./src/templates/blog-post.js"],"sourcesContent":["import * as React from 'react';\nimport Layout from './Layout';\n\nfunction BlogLayout({ children }) {\n  return (\n    <Layout>\n      <div className=\"container\">\n        <main>{children}</main>\n        <footer id=\"blog-footer\">\n          ©\n          {' '}\n          {new Date().getFullYear()}\n          , Built by\n          {' '}\n          <a href=\"https://www.github.com/adiela\">Adiela Abishua</a>\n          {'  with '}\n          <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\n        </footer>\n      </div>\n    </Layout>\n\n  );\n}\n\nexport default BlogLayout;\n","/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { StaticImage } from 'gatsby-plugin-image';\n\nfunction Bio() {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            github\n          }\n        }\n      }\n    }\n  `);\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author;\n  const social = data.site.siteMetadata?.social;\n\n  return (\n    <div className=\"bio\">\n      <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={['auto', 'webp', 'avif']}\n        src=\"../images/adiela_abishua.jpg\"\n        width={50}\n        height={50}\n        quality={95}\n        alt=\"Profile picture\"\n      />\n      {author?.name && (\n        <p>\n          Written by\n          {' '}\n          <strong><a href={`https://github.com/${social?.github || ''}`}>{author.name}</a></strong>\n          {' '}\n          {author?.summary || null}\n        </p>\n      )}\n    </div>\n  );\n}\n\nexport default Bio;\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nfunction Seo({ description, title, children }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `,\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n  const defaultTitle = site.siteMetadata?.title;\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || ''}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  );\n}\n\nexport default Seo;\n","import * as React from 'react';\nimport { Link, graphql } from 'gatsby';\n\nimport Bio from '../components/bio';\nimport Layout from '../components/BlogLayout';\nimport Seo from '../components/seo';\n\nfunction BlogPostTemplate({\n  data: {\n    previous, next, site, markdownRemark: post,\n  },\n  location,\n}) {\n  const siteTitle = site.siteMetadata?.title || 'Title';\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n          <p>{post.frontmatter.date}</p>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n        <footer>\n          <Bio />\n        </footer>\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: 'flex',\n            flexWrap: 'wrap',\n            justifyContent: 'space-between',\n            listStyle: 'none',\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ←\n                {' '}\n                {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title}\n                {' '}\n                →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  );\n}\n\nexport function Head({ data: { markdownRemark: post } }) {\n  return (\n    <Seo\n      title={post.frontmatter.title}\n      description={post.frontmatter.description || post.excerpt}\n    />\n  );\n}\n\nexport default BlogPostTemplate;\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"names":["children","className","id","Date","getFullYear","href","data","useStaticQuery","author","site","siteMetadata","social","S","layout","formats","src","width","height","quality","alt","name","github","summary","description","title","metaDescription","defaultTitle","content","property","twitter","Head","markdownRemark","post","frontmatter","excerpt","previous","next","location","siteTitle","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","html","style","display","flexWrap","justifyContent","listStyle","padding","Link","to","fields","slug","rel"],"sourceRoot":""}